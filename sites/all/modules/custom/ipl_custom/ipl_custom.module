<?php

function ipl_custom_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'confirm_payment_node_form') {
    global $user;
    $uid = $user->uid;
    $data = user_load($uid);
    $form['field_total_amount']['#access'] = FALSE;
    $form['field_match_id']['#access'] = FALSE;
    $form['title']['#access'] = FALSE;
    $form['title']['#default_value'] = 'confirm-payment-' . $data->name;
    if (isset($_SESSION['nid']) && isset($_SESSION['amount'])) {
      $form['field_total_amount']['und'][0]['value']['#default_value'] = $_SESSION['amount'];
      $form['field_match_id']['und'][0]['value']['#default_value'] = $_SESSION['nid'];
    }
  }
}


/**
 * Implements hook_menu().
 */
function ipl_custom_menu() {
  $items['payment-form/%'] = array(
    'page callback' => 'payment_gateway',
    'type' => MENU_CALLBACK,
    'access callback' => array('check_access_user'),
  );

  $items['admin/config/match-results'] = array(
    'title' => 'Match Result Data',
    'description' => 'Fill the results after match is over',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_match_configuration'),
    'access callback' => array('check_role'),
  );

  $items['admin/config/pay-online'] = array(
    'title' => "Max Pay online",
    'description' => 'set merchant id, product info and salt for pay-online',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('max_payu_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['pay-online-payment-status'] = array(
    'title' => 'Pay Online',
    'page callback' => 'max_payu_payment_status',
    'access callback' => TRUE,
  );

  $items['pay-online-submission'] = array(
    'title' => 'Pay Online',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('max_payu_submission'),
    'access callback' => array('check_access_user'),
  );

  return $items;
}


function check_role() {
  global $user;
  $roles = $user->roles;

  if (in_array('Admin', $roles) || in_array('administrator', $roles)) {
    return TRUE;
  }

  return FALSE;
}

function check_access_user() {
  if (user_is_logged_in()) {
    return TRUE;
  }

  return FALSE;
}

function custom_match_configuration($form, &$form_state) {
  $form['match_results'] = array(
    '#type' => 'fieldset',
    '#title' => 'Match Results',
  );

  $form['match_results']['current_match_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Match ID'),
    '#description' => t('Enter Match ID for which you want results. Match ID is there in Admin Interface along with the list of matches.'),
    '#default_value' => variable_get('current_match_id', ''),
    '#required' => TRUE,
  );

  $form['match_results']['match_winner'] = array(
    '#type' => 'textfield',
    '#title' => t('Match Winner'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('match_winner', ''),
    '#required' => TRUE,
  );

  $form['match_results']['match_toss'] = array(
    '#type' => 'textfield',
    '#title' => t('Match Toss'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('match_toss', ''),
    '#required' => TRUE,
  );

  $form['match_results']['match_powerplay_runs'] = array(
    '#type' => 'textfield',
    '#title' => t('Highest Powerplay Runs'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('match_powerplay_runs', ''),
    '#required' => TRUE,
  );

  $form['match_results']['highest_wicket_fall'] = array(
    '#type' => 'textfield',
    '#title' => t('Highest Wicket Fall'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('highest_wicket_fall', ''),
    '#required' => TRUE,
  );

  $form['match_results']['highest_fours_match'] = array(
    '#type' => 'textfield',
    '#title' => t('Highest 4s in match'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('highest_fours_match', ''),
    '#required' => TRUE,
  );

  $form['match_results']['highest_six_match'] = array(
    '#type' => 'textfield',
    '#title' => t('Highest 6s in match'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('highest_six_match', ''),
    '#required' => TRUE,
  );

  $form['match_results']['extra_runs_given'] = array(
    '#type' => 'textfield',
    '#title' => t('Extra runs given'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('extra_runs_given', ''),
    '#required' => TRUE,
  );

  $form['match_results']['top_batsman_match'] = array(
    '#type' => 'textfield',
    '#title' => t('Top Batsman in Match'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('top_batsman_match', ''),
    '#required' => TRUE,
  );

  $form['match_results']['top_bowler_match'] = array(
    '#type' => 'textfield',
    '#title' => t('Top Bowler in Match'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('top_bowler_match', ''),
    '#required' => TRUE,
  );

  $form['match_results']['highest_partnership'] = array(
    '#type' => 'textfield',
    '#title' => t('Highest Opening Partnership'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('highest_partnership', ''),
    '#required' => TRUE,
  );

  $form['match_results']['highest_catch_without_keeper'] = array(
    '#type' => 'textfield',
    '#title' => t('Highest Catch Out Without Including Keeper'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('highest_catch_without_keeper', ''),
    '#required' => TRUE,
  );

  $form['match_results']['highest_dismissal_keeper'] = array(
    '#type' => 'textfield',
    '#title' => t('Highest Dismissal by Keeper'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('highest_dismissal_keeper', ''),
    '#required' => TRUE,
  );

  $form['match_results']['player_score_50'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Score 50'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('player_score_50', ''),
    '#required' => TRUE,
  );

  $form['match_results']['highest_poweplay_4s'] = array(
    '#type' => 'textfield',
    '#title' => t('Highest Powerplay Boundaries'),
    '#description' => t('Fill A if Team A wins and B if Team B'),
    '#default_value' => variable_get('highest_poweplay_4s', ''),
    '#required' => TRUE,
  );

  $form['match_results']['top_batsman_team_a'] = array(
    '#type' => 'textfield',
    '#title' => t('Top Batsman Team A'),
    '#description' => t('Fill Answers in form of continuous string eg. ABC. It means A, B, C'),
    '#default_value' => variable_get('top_batsman_team_a', ''),
    '#required' => TRUE,
  );

  $form['match_results']['top_batsman_team_b'] = array(
    '#type' => 'textfield',
    '#title' => t('Top Batsman Team B'),
    '#description' => t('Fill Answers in form of continuous string eg. ABC. It means A, B, C'),
    '#default_value' => variable_get('top_batsman_team_b', ''),
    '#required' => TRUE,
  );

  $form['match_results']['top_bowler_team_a'] = array(
    '#type' => 'textfield',
    '#title' => t('Top Bowler Team A'),
    '#description' => t('Fill Answers in form of continuous string eg. ABC. It means A, B, C'),
    '#default_value' => variable_get('top_bowler_team_a', ''),
    '#required' => TRUE,
  );

  $form['match_results']['top_bowler_team_b'] = array(
    '#type' => 'textfield',
    '#title' => t('Top Bowler Team B'),
    '#description' => t('Fill Answers in form of continuous string eg. ABC. It means A, B, C'),
    '#default_value' => variable_get('top_bowler_team_b', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function payment_gateway() {
  $amount = arg(1);
  $renderable_form = array();
  if (is_numeric($amount) && !empty($amount)) {
    $_SESSION['amount'] = $amount;
  }
  else {
    drupal_set_message(t("Access denied"), 'warning');

    return $renderable_form;
  }

  $renderable_form = drupal_get_form('payment_form');

  return $renderable_form;
}


function payment_form($form, &$form_state) {

  drupal_add_js(drupal_get_path('module', 'ipl_custom') .'/ipl_form.js', 'file');
  global $user;
  $user_details = user_load($user->uid);

  if (!isset($form_state['payu_param_status'])) {

    $form['max_payu_user_name'] = array(
    '#title' => 'Full Name',
    '#description' => 'Full Name',
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => isset($user_details->field_full_name['und'][0]['value']) ?$user_details->field_full_name['und'][0]['value']: NULL ,
    );

    $form['max_payu_user_phone'] = array(
      '#title' => 'Phone No',
      '#type' => 'textfield',
      '#description' => 'Phone Number',
      '#required' => TRUE,
      '#default_value' => isset($user_details->field_mobile_number['und'][0]['value']) ?$user_details->field_mobile_number['und'][0]['value'] : NULL ,
    );

    $form['max_payu_user_email'] = array(
      '#title' => 'Email',
      '#description' => 'Email',
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => $user_details->mail,
    );

    $form['max_payu_user_amount'] = array(
      '#type' => 'textfield',
      '#title' => t('Amount'),
      '#required' => TRUE,
      '#default_value' => $_SESSION['amount'],
      '#element_validate' => array('element_validate_integer_positive'),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('PAY NOW'),
      '#suffix' => '</div>',
    );

    return $form;
  }
  else {
    if (isset($form_state['payu_params']) && !empty($form_state['payu_params'])) {

      $params = $form_state['payu_params'];

      $form['max_payu_submission_message'] = array(
        '#markup' => '<div class="max_payu_message"><p>Please do not press back button, we are redirecting you on payu page.</p></div>'
      );

      foreach ($params as $key => $value) {
        $form[$key] = array(
          '#type' => 'hidden',
          '#value' => t($value),
        );
      }

      $form['#action'] = url("https://test.payu.in/_payment");

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
        '#attributes' => array('class' => array('redirect_to_submission')),
      );

      return $form;
    }
  }
}


/**
 * Validations on a User Registration Form
 */

function user_profile_email_element_validate($element, &$form_state, $form) {
   if (!valid_email_address($element['#value'])) {
     form_error($element, t('Please enter a valid email address.'));
   }
}

function user_profile_contact_element_validate($element, &$form_state, $form) {
   if (!is_numeric($element['#value'])) {
     form_error($element, t('Please enter a valid contact number.'));
   }
   elseif (strlen($element['#value']) > 50) {
    form_error($element, t('Contact number limit exceeds 50'));
   }
}


/**
 * Submit Handler.
 */
function payment_form_submit($form, &$form_state) {

  $form_state['rebuild'] = 1;

  $name = $form_state['values']['max_payu_user_name'];
  $phone = $form_state['values']['max_payu_user_phone'];
  $email = $form_state['values']['max_payu_user_email'];

  $amount = $form_state['values']['max_payu_user_amount'];
  $amount = number_format((float)$amount, 2, '.', '');

  drupal_goto('node/add/confirm-payment');

  if ($amount <= 1000) {
    $salt = variable_get('max_payu_salt', 'eCwWELxi');
    $merchant_key = variable_get('max_payu_merchant_key', 'gtKFFx');
  }
  else {
    $salt = variable_get('max_payu_salt_greater_1k', 'eCwWELxi');
    $merchant_key = variable_get('max_payu_merchant_key_greater_1k', 'gtKFFx');
  }
  $txnid = max_payu_get_unique_transaction_id();
  $productinfo = variable_get('max_payu_productinfo', 'maxprodpayu');
  $merchant_key = 'gtKFFx';
  $salt = 'eCwWELxi';

  // Calculate sha512 hash value.
  $sha512 = $merchant_key . '|' .$txnid .'|' . $amount . '|' . $productinfo . '|' . $name . '|' . $email .'|||||||||||' . $salt;
  $hash_value = hash('sha512', $sha512);

  global $base_url;
  $redirect_url = $base_url . '/pay-online-payment-status';

  $options = array(
    'key' => $merchant_key,
    'txnid' => $txnid,
    'amount' => $amount,
    'productinfo' => $productinfo,
    'firstname' => $name,
    'email' => $email,
    'phone' => $phone,
    'surl' => $redirect_url,
    'furl' => $redirect_url,
    'curl' => $redirect_url,
    'hash' => $hash_value,
  );

  $form_state['payu_param_status'] = TRUE;

  $form_state['payu_params'] = $options;
}


/*
 * payment status page
 *
 * @return html
 */
function max_payu_payment_status() {
  $options = array();

  if (isset($_POST['status'])) {

    $txnid = $_POST['txnid'];

    // Value will be success or failure pending
    $status = $_POST['status'];
    $amount = $_POST['amount'];
    $date = $_POST['addedon'];
    $payment_mode = isset($_POST['mode']) ? $_POST['mode'] : '';
    $card_type = isset($_POST['card_type']) ? $_POST['card_type'] : '';

    // convert date in unix timestamp
    $date = strtotime($date);
    $transaction_details = array('transaction_id' => $txnid, 'amount' => $amount, 'status' => $status, 'added_on' => $date);


    //insert transaction details in to db table
    if (!empty($transaction_details)) {

      /***********************************/
      // $user_details = $_SESSION['max_user_details'];

      // $max_id = $user_details["max_id"];
      // $max_id_data = explode('.', $max_id);

      $options['Ipid'] = isset($user_details["ipid"]) ? $user_details["ipid"] : '';
      $transaction_details['ip_id'] = $options['Ipid'];

      $options['registrationno'] = '';
      $transaction_details['registration_no'] = $options['registrationno'];

      $options['amount'] = isset($_POST['amount']) ? (int)$_POST['amount'] : '';

      $options['hsplocationid'] = isset($user_details["HSPLocationId"]) ? $user_details["HSPLocationId"] : '';
      $transaction_details['hpslocation_id'] = $options['hsplocationid'];

      //   // String Values.
      $options['iacode'] = !empty($max_id_data) ? $max_id_data[0] : '';
      $transaction_details['ia_code'] = $options['iacode'];

      $options['paidBy'] = isset($_POST["firstname"]) ? $_POST["firstname"] : '';
      $transaction_details['paid_by'] = $options['paidBy'];

      $options['PtnStatus'] = 'A';
      $transaction_details['ptn_status'] = $options['PtnStatus'];

      $options['TransactionId'] = isset($_POST["txnid"]) ? $_POST["txnid"] : '';

      $options['OnlineContactNo'] = isset($_POST["phone"]) ? $_POST["phone"] : '';
      $transaction_details['contact_no'] = $options['OnlineContactNo'];
      $transaction_details['mihpayid'] = isset($_POST["mihpayid"]) ? $_POST["mihpayid"] : '';
      $transaction_details['payment_mode'] = $payment_mode;
      $transaction_details['card_type'] = $card_type;

      $transaction_details['receipt_no'] = NULL;
      $transaction_details['match_id'] = $_SESSION['nid'];
      /***********************************/


      max_payu_insert_transaction_details($transaction_details);
    }
    if ($status == 'success') {

      // Deposit detail at max server
      // $maxPayuDetails = $_POST;
      // $txn = $options['TransactionId'];
      // $options["TransactionId"] = isset($_POST["mihpayid"]) ? $_POST["mihpayid"] : '';
      // $receipt_no = max_payu_deposit_detail_on_maxserver($options);
      $output = '<div id="payment-status-message"><p class="thank-you">THANK YOU</p><p class="status-message">Your online transaction has been successful.</p>';
      // if(!is_null($receipt_no)) {

      //   try {
      //     $receipt_updated = db_update('max_payu_transaction_details')
      //     ->fields(array(
      //       'reciept_no' => $receipt_no,
      //     ))
      //     ->condition('transaction_id', $txn, '=')
      //     ->execute();
      //   }
      //   catch(Exception $e) {

      //   }

      //   $output .= '<p class="status-message">Your receipt no. is <span class="receipt-no">' . $receipt_no . '</span></p>';
      // }
      $output .= '<p class="status-message">Go to <a href="/">Home Page</a></p>';
      $output .= '</div>';
      return $output;
    }
    else {
      $output = '<div id="payment-status-message"><p class="thank-you">OOPS!</p><p class="status-message">Transaction failed! <a href="/payment-form">Try Again</a></p></div>';
      return $output;
    }
  }
}




function check_betting_time($nid) {
  $node = node_load($nid);

  if (isset($node->field_betting_time['und'][0]['value']) && !empty($node->field_betting_time['und'][0]['value'])) {
    $betting_time = $node->field_betting_time['und'][0]['value'];
    $betting_time = strtotime('+5 hour +30 minutes',strtotime($betting_time));
    $current_time = REQUEST_TIME;

    if ($current_time < $betting_time) {
       return TRUE;
    }
    return FALSE;
  }
}


function amount_validate($element, &$form_state, $form) {
  if (!is_numeric($element['#value'])) {
   form_error($element, t('Please enter a valid amount number.'));
  }
  elseif ($element['#value'] % 10 != 0) {
  form_error($element, t('Amount must be in multiples of 10'));
  }
}

/**
 * @file
 * Contains max payu database related functions.
 */

/**
 * create unique transaction id when user call this function
 * @return string unique transaction id
 */
function max_payu_get_unique_transaction_id() {
  $result = db_query("SELECT transaction_id FROM {max_payu_transaction_details}")->fetchAll();
  //for first transaction id
  if (count($result) == 0) {
    $output = max_payu_create_transaction_id();
    return $output;
  }
  else {
    $transaction_id = max_payu_create_transaction_id();
    $match_result = db_query('SELECT t.transaction_id FROM {max_payu_transaction_details} AS t WHERE t.transaction_id = :transaction_id', array(':transaction_id' => $transaction_id))->fetchAll();
    // return value in case of unique transaction id only
    if (!empty($match_result)) {
      max_payu_get_unique_transaction_id();
    }
    else {
      $output = $transaction_id;
      return $output;
    }
  }
}

/**
 * create random alphanumeric array of length between 8 and 25 characters
 * @return string random alphanumeric array
 */
function max_payu_create_transaction_id() {
  $capital_alphabets = range('A','Z');
  $small_alphabets = range('a','z');
  $numbers = range('0','9');
  $characters = array_merge($capital_alphabets, $small_alphabets, $numbers);
  $length = 8;
  $max = count($characters) - 1;
  $str = "";
  for ($i = 0;  $i < $length; $i++) {
    $rand = mt_rand(0, $max);
    $str .= $characters[$rand];
  }
  $time = time();
  $str = $str . $time;
  return $str;
}

/**
 * Insert transaction details in max_payu_transaction_details table and show error
 * if insertion doesn't occur successfully.
 *
 * @param  array  $transaction_details
 * Array of transaction details
 */
function max_payu_insert_transaction_details($transaction_details = array()) {
  if (!empty($transaction_details)) {
    $transaction_id = $transaction_details['transaction_id'];
    $max_id = '';
    $amount = $transaction_details['amount'];
    $status = $transaction_details['status'];
    $date = $transaction_details['added_on'];

    try {
      $result = db_insert('max_payu_transaction_details')
      ->fields(array(
        'transaction_id' => $transaction_id,
        'max_id' => $max_id,
        'amount' => $amount,
        'status' => $status,
        'added_on' => $date,
        'ip_id' => $transaction_details['ip_id'],
        'registration_no' => $transaction_details['registration_no'],
        'hpslocation_id' => $transaction_details['hpslocation_id'],
        'ia_code' => $transaction_details['ia_code'],
        'paid_by' => $transaction_details['paid_by'],
        'ptn_status' => $transaction_details['ptn_status'],
        'contact_no' => $transaction_details['contact_no'],
        'mihpayid' => $transaction_details['mihpayid'],
        'payment_mode' => $transaction_details['payment_mode'],
        'card_type' => $transaction_details['card_type'],
        'match_id' => $transaction_details['match_id'],
      ))
      ->execute();
    }
    catch(Exception $e) {
      drupal_set_message(t('An error occurred while inserting transaction details and processing did not complete.'), 'error');
    }
  }
}


/**
 * Get transcation ids.
 *
 * @return array
 *   Having transcation ids.
 */
function max_payu_get_transcation_ids() {
  $transcation_ids = array();
  $query = db_select('max_payu_transaction_details', 'mpts')
  ->fields('mpts', array('transaction_id'))
  ->condition('mpts.status', 'success', '=')
  ->condition('mpts.reciept_no', NULL)
  ->orderBy('mpts.added_on', DESC);
  $records = $query->execute();
  if(!empty($records)) {
    foreach ($records as $key => $record) {
      $transcation_ids[] = $record->transaction_id;
    }
  }

  return $transcation_ids;
}


/**
 * @file
 * Contains max payu admin setting form.
 */

/**
 * To get an admin accessible form to set values for max payu
 *
 * @param  array $form
 *   Having structure of the form.
 * @param  array &$form_state
 *   Having form information
 *
 * @return  array
 *   Having form structure
 */
function max_payu_admin_settings($form, &$form_state) {
  $form = array();

  global $user;
  $uid = $user->uid;
  if ($user->uid != '1') {
    $form['not_super_admin'] = array(
      '#markup' => '<p>You are not allowed to view this form</p>',
    );

    return $form;
  }
  else {
    $form['max_payu_merchant_key'] = array(
      '#type' => 'textfield',
      '#title' => t('PayU Merchant Key for less than or equal to 1k'),
      '#size' => 25,
      '#maxlength' => 25,
      '#default_value' => variable_get('max_payu_merchant_key', 'gtKFFx'),
    );

    $form['max_payu_merchant_key_greater_1k'] = array(
      '#type' => 'textfield',
      '#title' => t('PayU Merchant Key for greater than 1k'),
      '#size' => 25,
      '#maxlength' => 25,
      '#default_value' => variable_get('max_payu_merchant_key_greater_1k', 'gtKFFx'),
    );

    $form['max_payu_salt'] = array(
      '#type' => 'textfield',
      '#title' => t('PayU Salt for less than or equal to 1k'),
      '#size' => 25,
      '#maxlength' => 25,
      '#default_value' => variable_get('max_payu_salt', 'eCwWELxi'),
    );

    $form['max_payu_salt_greater_1k'] = array(
      '#type' => 'textfield',
      '#title' => t('PayU Salt for greater than 1k'),
      '#size' => 25,
      '#maxlength' => 25,
      '#default_value' => variable_get('max_payu_salt_greater_1k', 'eCwWELxi'),
    );

    $form['max_payu_productinfo'] = array(
      '#type' => 'textfield',
      '#title' => t('PayU Product Info'),
      '#size' => 25,
      '#maxlength' => 25,
      '#default_value' => variable_get('max_payu_productinfo', 'maxprodpayu'),
    );

    // Pass the form array through system_settings_form()
    return system_settings_form($form);
  }

}


/**
 * Max payu submission menu callback.
 */
function max_payu_submission($form, &$form_state) {

  if (isset($_SESSION['max_payu_params']) && !empty($_SESSION['max_payu_params'])) {

    $params = $_SESSION['max_payu_params'];

    foreach ($params as $key => $value) {
      $form[$key] = array(
        '#type' => 'hidden',
        '#value' => t($value),
      );
    }

    $form['#action'] = url("https://secure.payu.in/_payment");

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );

    return $form;
  }
}

// Calculation of final results
function get_final_results() {
  $query = db_select('forms', 'f')
    ->fields('f', array('form_id', 'form_name'));
  $results = $query->execute()->fetchAll();
  if (!empty($results)) {
    foreach($results as $key => $value) {
      $form_name = $value->form_name;
      $form_id = $value->form_id;
      $current_match_id = variable_get('current_match_id', '');
      switch ($form_id) {
        case 1:
          $final_ans = variable_get('match_winner', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 2:
          $final_ans = variable_get('match_toss', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 3:
          $final_ans = variable_get('match_powerplay_runs', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 4:
          $final_ans = variable_get('highest_wicket_fall', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 5:
          $final_ans = variable_get('highest_fours_match', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 6:
          $final_ans = variable_get('highest_six_match', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 7:
          $final_ans = variable_get('extra_runs_given', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 8:
          $final_ans = variable_get('top_batsman_match', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 9:
          $final_ans = variable_get('top_bowler_match', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 10:
          $final_ans = variable_get('highest_partnership', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 11:
          $final_ans = variable_get('highest_catch_without_keeper', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 12:
          $final_ans = variable_get('highest_dismissal_keeper', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 13:
          $final_ans = variable_get('player_score_50', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 14:
          $final_ans = variable_get('highest_poweplay_4s', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 15:
          $final_ans = variable_get('top_batsman_team_a', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 16:
          $final_ans = variable_get('top_batsman_team_b', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 17:
          $final_ans = variable_get('top_bowler_team_a', '');
          $total_amount = get_total_amount($form_id);
          break;
        case 18:
          $final_ans = variable_get('top_bowler_team_b', '');
          $total_amount = get_total_amount($form_id);
          break;
        default:
          $final_ans = NULL;
      }

      $results = get_data_for_users_win($form_id, $current_match_id, $final_ans);
      $total_users_count = count($results);
      $results['count' . $form_name] = $total_users_count;
      $results[$form_name] = !empty($results)? $results : NULL;
    }
  }

  return $results;
}


function get_data_for_users_win($form_id, $current_match_id, $final_ans, $uid = NULL) {
  $query = db_select("betting", "b")
    -> fields('b', array('uid'))
    -> fields('m', array('amount', 'paid_by'));
  $query-> join('max_payu_transaction_details', 'm', "m.match_id = b.nid");
  $query->condition("b.form_id", $form_id);
  $query->condition('b.select_value', $final_ans);
  $query->condition('b.nid', $current_match_id);
  $query->condition('m.status', 'failure');
   if (!empty($uid)) {
    $query->condition('b.uid', $uid);
  }
  $results = $query->execute()->fetchAll();

  return $results;
}

function get_total_amount($form_id, $uid = NULL) {
  $query = db_select('node', 'n')
    -> fields('ma', array('field_for_match_value'));
  $query-> join ('field_data_field_add_amount', 'am', "am.entity_id = n.nid");
  $query-> join ('field_data_field_form_id', 'f', "f.entity_id = n.nid");
  $query-> join ('field_data_field_for_match', 'ma', "ma.entity_id = n.nid");
  $query->condition('f.field_form_id_value', $form_id);
  if (!empty($uid)) {
    $query->condition('n.uid', $uid);
  }
  $results = $query->execute()->fetchCol();
  dpm($results);
  $match_id = !empty($results) ? $results[0] : NULL;
  if (!empty($match_id)) {
    $query = db_select('max_payu_transaction_details', 't')
              ->fields('t', array('amount'));
    $query->condition('t.status', 'failure');
    $query->condition('t.match_id', $match_id);
    $results = $query->execute()->fetchCol();
    if (!empty($results)) {
       $amount = array_sum($results);
    }
    else {
      $amount = 0;
    }
  }
  else {
    $amount  = 0;
  }

  return  $total_amount;
}
